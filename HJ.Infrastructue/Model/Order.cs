//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace HJ.Infrastructue.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Device))]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(OrderLine))]
    public partial class Order: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private int _orderID;
    
        [DataMember]
        public Nullable<System.DateTime> OrderCreated
        {
            get { return _orderCreated; }
            set
            {
                if (_orderCreated != value)
                {
                    _orderCreated = value;
                    OnPropertyChanged("OrderCreated");
                }
            }
        }
        private Nullable<System.DateTime> _orderCreated;
    
        [DataMember]
        public string OrderCreator
        {
            get { return _orderCreator; }
            set
            {
                if (_orderCreator != value)
                {
                    _orderCreator = value;
                    OnPropertyChanged("OrderCreator");
                }
            }
        }
        private string _orderCreator;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Device> Devices
        {
            get
            {
                if (_devices == null)
                {
                    _devices = new TrackableCollection<Device>();
                    _devices.CollectionChanged += FixupDevices;
                }
                return _devices;
            }
            set
            {
                if (!ReferenceEquals(_devices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_devices != null)
                    {
                        _devices.CollectionChanged -= FixupDevices;
                    }
                    _devices = value;
                    if (_devices != null)
                    {
                        _devices.CollectionChanged += FixupDevices;
                    }
                    OnNavigationPropertyChanged("Devices");
                }
            }
        }
        private TrackableCollection<Device> _devices;
    
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>();
                    _invoices.CollectionChanged += FixupInvoices;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged += FixupInvoices;
                    }
                    OnNavigationPropertyChanged("Invoices");
                }
            }
        }
        private TrackableCollection<Invoice> _invoices;
    
        [DataMember]
        public TrackableCollection<OrderLine> OrderLines
        {
            get
            {
                if (_orderLines == null)
                {
                    _orderLines = new TrackableCollection<OrderLine>();
                    _orderLines.CollectionChanged += FixupOrderLines;
                }
                return _orderLines;
            }
            set
            {
                if (!ReferenceEquals(_orderLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_orderLines != null)
                    {
                        _orderLines.CollectionChanged -= FixupOrderLines;
                    }
                    _orderLines = value;
                    if (_orderLines != null)
                    {
                        _orderLines.CollectionChanged += FixupOrderLines;
                    }
                    OnNavigationPropertyChanged("OrderLines");
                }
            }
        }
        private TrackableCollection<OrderLine> _orderLines;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Devices.Clear();
            Invoices.Clear();
            OrderLines.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDevices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.Order = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Devices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Devices", item);
                    }
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.Order = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }
                }
            }
        }
    
        private void FixupOrderLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrderLine item in e.NewItems)
                {
                    item.Order = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderLines", item);
                    }
                }
            }
        }

        #endregion
    }
}
