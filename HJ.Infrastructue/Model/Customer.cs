//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace HJ.Infrastructue.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Device))]
    [KnownType(typeof(Invoice))]
    public partial class Customer: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public Nullable<int> CustParentID
        {
            get { return _custParentID; }
            set
            {
                if (_custParentID != value)
                {
                    _custParentID = value;
                    OnPropertyChanged("CustParentID");
                }
            }
        }
        private Nullable<int> _custParentID;
    
        [DataMember]
        public string AccountType
        {
            get { return _accountType; }
            set
            {
                if (_accountType != value)
                {
                    _accountType = value;
                    OnPropertyChanged("AccountType");
                }
            }
        }
        private string _accountType;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (_middleName != value)
                {
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        private string _middleName;
    
        [DataMember]
        public string SurName
        {
            get { return _surName; }
            set
            {
                if (_surName != value)
                {
                    _surName = value;
                    OnPropertyChanged("SurName");
                }
            }
        }
        private string _surName;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string CompanyName
        {
            get { return _companyName; }
            set
            {
                if (_companyName != value)
                {
                    _companyName = value;
                    OnPropertyChanged("CompanyName");
                }
            }
        }
        private string _companyName;
    
        [DataMember]
        public string CompanyRole
        {
            get { return _companyRole; }
            set
            {
                if (_companyRole != value)
                {
                    _companyRole = value;
                    OnPropertyChanged("CompanyRole");
                }
            }
        }
        private string _companyRole;
    
        [DataMember]
        public string Telephone
        {
            get { return _telephone; }
            set
            {
                if (_telephone != value)
                {
                    _telephone = value;
                    OnPropertyChanged("Telephone");
                }
            }
        }
        private string _telephone;
    
        [DataMember]
        public string Mobile
        {
            get { return _mobile; }
            set
            {
                if (_mobile != value)
                {
                    _mobile = value;
                    OnPropertyChanged("Mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string AdressLine1
        {
            get { return _adressLine1; }
            set
            {
                if (_adressLine1 != value)
                {
                    _adressLine1 = value;
                    OnPropertyChanged("AdressLine1");
                }
            }
        }
        private string _adressLine1;
    
        [DataMember]
        public string AdressLine2
        {
            get { return _adressLine2; }
            set
            {
                if (_adressLine2 != value)
                {
                    _adressLine2 = value;
                    OnPropertyChanged("AdressLine2");
                }
            }
        }
        private string _adressLine2;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string County
        {
            get { return _county; }
            set
            {
                if (_county != value)
                {
                    _county = value;
                    OnPropertyChanged("County");
                }
            }
        }
        private string _county;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string PostCode
        {
            get { return _postCode; }
            set
            {
                if (_postCode != value)
                {
                    _postCode = value;
                    OnPropertyChanged("PostCode");
                }
            }
        }
        private string _postCode;
    
        [DataMember]
        public string CustomerNotes
        {
            get { return _customerNotes; }
            set
            {
                if (_customerNotes != value)
                {
                    _customerNotes = value;
                    OnPropertyChanged("CustomerNotes");
                }
            }
        }
        private string _customerNotes;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Device> Devices
        {
            get
            {
                if (_devices == null)
                {
                    _devices = new TrackableCollection<Device>();
                    _devices.CollectionChanged += FixupDevices;
                }
                return _devices;
            }
            set
            {
                if (!ReferenceEquals(_devices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_devices != null)
                    {
                        _devices.CollectionChanged -= FixupDevices;
                    }
                    _devices = value;
                    if (_devices != null)
                    {
                        _devices.CollectionChanged += FixupDevices;
                    }
                    OnNavigationPropertyChanged("Devices");
                }
            }
        }
        private TrackableCollection<Device> _devices;
    
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>();
                    _invoices.CollectionChanged += FixupInvoices;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged += FixupInvoices;
                    }
                    OnNavigationPropertyChanged("Invoices");
                }
            }
        }
        private TrackableCollection<Invoice> _invoices;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Devices.Clear();
            Invoices.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDevices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Devices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Devices", item);
                    }
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }
                }
            }
        }

        #endregion
    }
}
