//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace HJ.Infrastructue.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(Order))]
    public partial class Device: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DeviceID
        {
            get { return _deviceID; }
            set
            {
                if (_deviceID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DeviceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _deviceID = value;
                    OnPropertyChanged("DeviceID");
                }
            }
        }
        private int _deviceID;
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.CustomerID != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public Nullable<int> OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrderID", _orderID);
                    if (!IsDeserializing)
                    {
                        if (Order != null && Order.OrderID != value)
                        {
                            Order = null;
                        }
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private Nullable<int> _orderID;
    
        [DataMember]
        public Nullable<int> InvoiceID
        {
            get { return _invoiceID; }
            set
            {
                if (_invoiceID != value)
                {
                    ChangeTracker.RecordOriginalValue("InvoiceID", _invoiceID);
                    if (!IsDeserializing)
                    {
                        if (Invoice != null && Invoice.InvoiceID != value)
                        {
                            Invoice = null;
                        }
                    }
                    _invoiceID = value;
                    OnPropertyChanged("InvoiceID");
                }
            }
        }
        private Nullable<int> _invoiceID;
    
        [DataMember]
        public string DeviceLabel
        {
            get { return _deviceLabel; }
            set
            {
                if (_deviceLabel != value)
                {
                    _deviceLabel = value;
                    OnPropertyChanged("DeviceLabel");
                }
            }
        }
        private string _deviceLabel;
    
        [DataMember]
        public string DeviceType
        {
            get { return _deviceType; }
            set
            {
                if (_deviceType != value)
                {
                    _deviceType = value;
                    OnPropertyChanged("DeviceType");
                }
            }
        }
        private string _deviceType;
    
        [DataMember]
        public int IMEI
        {
            get { return _iMEI; }
            set
            {
                if (_iMEI != value)
                {
                    _iMEI = value;
                    OnPropertyChanged("IMEI");
                }
            }
        }
        private int _iMEI;
    
        [DataMember]
        public Nullable<int> SimNumber
        {
            get { return _simNumber; }
            set
            {
                if (_simNumber != value)
                {
                    _simNumber = value;
                    OnPropertyChanged("SimNumber");
                }
            }
        }
        private Nullable<int> _simNumber;
    
        [DataMember]
        public string SimProvider
        {
            get { return _simProvider; }
            set
            {
                if (_simProvider != value)
                {
                    _simProvider = value;
                    OnPropertyChanged("SimProvider");
                }
            }
        }
        private string _simProvider;
    
        [DataMember]
        public string VoiceNumber
        {
            get { return _voiceNumber; }
            set
            {
                if (_voiceNumber != value)
                {
                    _voiceNumber = value;
                    OnPropertyChanged("VoiceNumber");
                }
            }
        }
        private string _voiceNumber;
    
        [DataMember]
        public Nullable<System.DateTime> ContractFrom
        {
            get { return _contractFrom; }
            set
            {
                if (_contractFrom != value)
                {
                    _contractFrom = value;
                    OnPropertyChanged("ContractFrom");
                }
            }
        }
        private Nullable<System.DateTime> _contractFrom;
    
        [DataMember]
        public Nullable<System.DateTime> ContractTo
        {
            get { return _contractTo; }
            set
            {
                if (_contractTo != value)
                {
                    _contractTo = value;
                    OnPropertyChanged("ContractTo");
                }
            }
        }
        private Nullable<System.DateTime> _contractTo;
    
        [DataMember]
        public string Comments
        {
            get { return _comments; }
            set
            {
                if (_comments != value)
                {
                    _comments = value;
                    OnPropertyChanged("Comments");
                }
            }
        }
        private string _comments;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public Invoice Invoice
        {
            get { return _invoice; }
            set
            {
                if (!ReferenceEquals(_invoice, value))
                {
                    var previousValue = _invoice;
                    _invoice = value;
                    FixupInvoice(previousValue);
                    OnNavigationPropertyChanged("Invoice");
                }
            }
        }
        private Invoice _invoice;
    
        [DataMember]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (!ReferenceEquals(_order, value))
                {
                    var previousValue = _order;
                    _order = value;
                    FixupOrder(previousValue);
                    OnNavigationPropertyChanged("Order");
                }
            }
        }
        private Order _order;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            Invoice = null;
            Order = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Devices.Contains(this))
            {
                previousValue.Devices.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Devices.Contains(this))
                {
                    Customer.Devices.Add(this);
                }
    
                CustomerID = Customer.CustomerID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupInvoice(Invoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Devices.Contains(this))
            {
                previousValue.Devices.Remove(this);
            }
    
            if (Invoice != null)
            {
                if (!Invoice.Devices.Contains(this))
                {
                    Invoice.Devices.Add(this);
                }
    
                InvoiceID = Invoice.InvoiceID;
            }
            else if (!skipKeys)
            {
                InvoiceID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice")
                    && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                {
                    ChangeTracker.OriginalValues.Remove("Invoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }
                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    Invoice.StartTracking();
                }
            }
        }
    
        private void FixupOrder(Order previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Devices.Contains(this))
            {
                previousValue.Devices.Remove(this);
            }
    
            if (Order != null)
            {
                if (!Order.Devices.Contains(this))
                {
                    Order.Devices.Add(this);
                }
    
                OrderID = Order.OrderID;
            }
            else if (!skipKeys)
            {
                OrderID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && (ChangeTracker.OriginalValues["Order"] == Order))
                {
                    ChangeTracker.OriginalValues.Remove("Order");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
                {
                    Order.StartTracking();
                }
            }
        }

        #endregion
    }
}
