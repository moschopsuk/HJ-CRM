//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace HJ.Infrastructue.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Order))]
    public partial class OrderLine: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int InvoiceLineID
        {
            get { return _invoiceLineID; }
            set
            {
                if (_invoiceLineID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'InvoiceLineID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _invoiceLineID = value;
                    OnPropertyChanged("InvoiceLineID");
                }
            }
        }
        private int _invoiceLineID;
    
        [DataMember]
        public int OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrderID", _orderID);
                    if (!IsDeserializing)
                    {
                        if (Order != null && Order.OrderID != value)
                        {
                            Order = null;
                        }
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private int _orderID;
    
        [DataMember]
        public int Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private int _quantity;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public decimal UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice");
                }
            }
        }
        private decimal _unitPrice;
    
        [DataMember]
        public string UnitCode
        {
            get { return _unitCode; }
            set
            {
                if (_unitCode != value)
                {
                    _unitCode = value;
                    OnPropertyChanged("UnitCode");
                }
            }
        }
        private string _unitCode;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (!ReferenceEquals(_order, value))
                {
                    var previousValue = _order;
                    _order = value;
                    FixupOrder(previousValue);
                    OnNavigationPropertyChanged("Order");
                }
            }
        }
        private Order _order;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Order = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderLines.Contains(this))
            {
                previousValue.OrderLines.Remove(this);
            }
    
            if (Order != null)
            {
                if (!Order.OrderLines.Contains(this))
                {
                    Order.OrderLines.Add(this);
                }
    
                OrderID = Order.OrderID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && (ChangeTracker.OriginalValues["Order"] == Order))
                {
                    ChangeTracker.OriginalValues.Remove("Order");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
                {
                    Order.StartTracking();
                }
            }
        }

        #endregion
    }
}
